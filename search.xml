<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java-[第二篇 Java基础语法]</title>
    <url>/2019/11/03/Java-%E7%AC%AC%E4%BA%8C%E7%AF%87-Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="1-注释"><a href="#1-注释" class="headerlink" title="1. 注释"></a>1. 注释</h1><p>编写程序时添加注释：调高程序的可读性(编程思路和程序作用)。添加注释是一种良好的编程习惯。</p>
<p>注释不会出现在字节码.class文件中(编译器会跳过注释)。</p>
<p>Java的注释分为三种：单行注释，多行注释，文档注释。</p>
<p>单行注释：以”//“开头，”//“后面的内容为注释。</p>
<p>多行注释：以”/*“开头，以”*/“结尾，”/*“和“*/”之间的内容为注释。有两种形式：空白处多行注释，行内任意位置注释。</p>
<p>文档注释：以”/**“开头，以”*/“结尾，”/**“和”*/“之间的内容为注释。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testing</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 文档注释</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 单行注释</span></span><br><span class="line">        System.out.println(<span class="string">"My Name is Liu Jinan"</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">           多行注释1</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">"I Like Swimming"</span><span class="comment">/* 多行注释2 */</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-标识符"><a href="#2-标识符" class="headerlink" title="2. 标识符"></a>2. 标识符</h1><p>标识符：给包、类、方法、变量起名字。</p>
<p>标识符命名规则：</p>
<ol>
<li>以字母，下划线”_”，美元符号”$”开头，数字不能开头</li>
<li>不能包含空格，不可以使用关键字和保留字</li>
<li>严格区分大小写</li>
<li>见名知意</li>
</ol>
<table>
<thead>
<tr>
<th>标识符</th>
<th>规则</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>包</td>
<td>全部小写</td>
<td>xxxyyyzzz</td>
</tr>
<tr>
<td>常量</td>
<td>全部大写 + 下划线</td>
<td>XXX_YYY_ZZZ</td>
</tr>
<tr>
<td>类、接口</td>
<td>首字母大写 + 驼峰原则</td>
<td>XxxYyyZzz</td>
</tr>
<tr>
<td>方法、变量</td>
<td>驼峰原则</td>
<td>xxxYyyZzz</td>
</tr>
</tbody></table>
<h1 id="3-变量"><a href="#3-变量" class="headerlink" title="3. 变量"></a>3. 变量</h1><table>
<thead>
<tr>
<th>变量</th>
<th>内容</th>
</tr>
</thead>
<tbody><tr>
<td>格式</td>
<td>变量类型  变量名  =  值</td>
</tr>
<tr>
<td>作用</td>
<td>保存数据</td>
</tr>
<tr>
<td>本质</td>
<td>可操作的存储空间（使用变量名访问）</td>
</tr>
<tr>
<td>要求</td>
<td>必须先声明，后使用；必须声明其数据类型（强类型语言）</td>
</tr>
<tr>
<td>三要素</td>
<td>变量名，变量类型，作用域</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testing</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//变量的声明:声明时赋值</span></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">double</span> b = <span class="number">1.2</span>;</span><br><span class="line">        <span class="keyword">long</span> c = <span class="number">50</span>;</span><br><span class="line">        <span class="comment">//变量的声明:先声明后赋值</span></span><br><span class="line">        <span class="keyword">int</span> d;</span><br><span class="line">        d = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-1-分类"><a href="#3-1-分类" class="headerlink" title="3.1 分类"></a>3.1 分类</h2><h3 id="3-1-1-按照数据类型"><a href="#3-1-1-按照数据类型" class="headerlink" title="3.1.1 按照数据类型"></a>3.1.1 按照数据类型</h3><img src="/2019/11/03/Java-%E7%AC%AC%E4%BA%8C%E7%AF%87-Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/1.png" style="zoom:70%;">

<p>按照数据类型分类，变量分为基本数据类型和引用数据类型。</p>
<p>基本数据类型8种：byte，short，int，long，float，double，char，boolean。引用数据类型3种：类，接口，数组。</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>占用存储空间（1 byte = 8 bit）</th>
<th>范围</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>1 字节</td>
<td><strong>-128 ~ 127</strong></td>
</tr>
<tr>
<td>short</td>
<td>2 字节</td>
<td>-2^15^ ~ 2^15^-1</td>
</tr>
<tr>
<td>int</td>
<td>4 字节</td>
<td>-2^31^ ~ 2^31^-1</td>
</tr>
<tr>
<td>long</td>
<td>8 字节</td>
<td>-2^63^ ~ 2^63^-1</td>
</tr>
<tr>
<td>float</td>
<td>4 字节</td>
<td>-2^128^ ~ 2^128^</td>
</tr>
<tr>
<td>double</td>
<td>8 字节</td>
<td>-2^1024^ ~ 2^1024^</td>
</tr>
<tr>
<td>char</td>
<td>2 字节</td>
<td>—-</td>
</tr>
<tr>
<td>boolean</td>
<td><strong>1 位</strong></td>
<td>—-</td>
</tr>
<tr>
<td>类</td>
<td>4 字节</td>
<td>—-</td>
</tr>
<tr>
<td>接口</td>
<td>4 字节</td>
<td>—-</td>
</tr>
<tr>
<td>数组</td>
<td>4 字节</td>
<td>—-</td>
</tr>
</tbody></table>
<ol>
<li>整型有4种表示形式，整型默认是int类型，声明long类型需要加”l”或”L”，建议”L”</li>
</ol>
<table>
<thead>
<tr>
<th>进制</th>
<th>要求</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>二进制</td>
<td>以0b/0B开头：0,1</td>
<td>0b01110011</td>
</tr>
<tr>
<td>八进制</td>
<td>以0开头：0,1,2,3,4,5,6,7</td>
<td>015</td>
</tr>
<tr>
<td>十进制</td>
<td>0,1,2,3,4,5,6,7,8,9</td>
<td>512</td>
</tr>
<tr>
<td>十六进制</td>
<td>以0x/0X开头：0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F</td>
<td>0x1A</td>
</tr>
</tbody></table>
<ol start="2">
<li>浮点型有2种表示形式，浮点型默认是double类型，声明float类型需要加”f”或”F”，建议”F”，浮点型存在舍入误差，不能用于精确比较，可以使用BigDecimal类解决。</li>
</ol>
<table>
<thead>
<tr>
<th>形式</th>
<th>要求</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>十进制</td>
<td>必须有小数点</td>
<td>5.12，.512F</td>
</tr>
<tr>
<td>科学计数法</td>
<td>数E幂次方</td>
<td>5.12e2，512E2</td>
</tr>
</tbody></table>
<ol start="3">
<li>字符型有3种表示形式，字符型可以进行运算（每个字符存在对应Unicode码），Unicode可以唯一表示世界上所有的符号，UTF-8是互联网使用最多的Unicode编码方式。”A”的Unicode十进制是65，”a”的Unicode十进制是97</li>
</ol>
<table>
<thead>
<tr>
<th>形式</th>
<th>要求</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>单个字符</td>
<td>‘ ‘</td>
<td>‘a’</td>
</tr>
<tr>
<td>转义字符</td>
<td>‘\字符’</td>
<td>‘\n’</td>
</tr>
<tr>
<td>Unicode值</td>
<td>‘\uXXXX’</td>
<td>‘\u0061’</td>
</tr>
</tbody></table>
<ol start="4">
<li>布尔型用于逻辑判断，只有两个值true和false。</li>
<li>字符串属于引用数据类型，使用双引号括起来” “，字符串连接符”+”，字符串和基本数据类型只能做连接运算</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testing</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//整型</span></span><br><span class="line">        <span class="keyword">byte</span> a = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">short</span> b = <span class="number">200</span>;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">300</span>;</span><br><span class="line">        <span class="keyword">long</span> d = <span class="number">400L</span>;</span><br><span class="line">        <span class="comment">//浮点型</span></span><br><span class="line">        <span class="keyword">float</span> e = <span class="number">5.12F</span>;</span><br><span class="line">        <span class="keyword">double</span> f = .<span class="number">512</span>;</span><br><span class="line">        <span class="comment">//字符型，两个常用的转义字符:"\n"换行，"\t"制表</span></span><br><span class="line">        <span class="keyword">char</span> c1 = <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">char</span> c2 = <span class="string">'\n'</span>;</span><br><span class="line">        <span class="keyword">char</span> c3 = <span class="string">'\t'</span>;</span><br><span class="line">        <span class="keyword">char</span> c4 = <span class="string">'\u0061'</span>;</span><br><span class="line">        <span class="comment">//布尔型</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//字符串</span></span><br><span class="line">        String str = <span class="string">"abc"</span>;</span><br><span class="line">        String str1 = str + a; <span class="comment">//结果是：字符串"abc100"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-1-2-按照声明位置"><a href="#3-1-2-按照声明位置" class="headerlink" title="3.1.2 按照声明位置"></a>3.1.2 按照声明位置</h3><img src="/2019/11/03/Java-%E7%AC%AC%E4%BA%8C%E7%AF%87-Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/2.png" style="zoom:70%;">

<table>
<thead>
<tr>
<th>名称</th>
<th>在类体内</th>
<th>在方法体内</th>
<th>以static修饰</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>实例变量</td>
<td>√</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>类变量</td>
<td>√</td>
<td></td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>形参</td>
<td>√</td>
<td>√</td>
<td></td>
<td>方法、构造器中定义</td>
</tr>
<tr>
<td>方法局部变量</td>
<td>√</td>
<td>√</td>
<td></td>
<td>方法内定义</td>
</tr>
<tr>
<td>代码块局部变量</td>
<td>√</td>
<td>√</td>
<td></td>
<td>代码块内定义</td>
</tr>
</tbody></table>
<p>按照声明位置的变量，了解即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testing</span> </span>&#123;    </span><br><span class="line">    <span class="comment">// 实例变量count</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">100</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 类变量number</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> number = <span class="number">50</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 形参 count</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Testing</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 形参str1,str2</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getVar</span><span class="params">(String str1,String str2)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 方法局部变量salary</span></span><br><span class="line">        <span class="keyword">double</span> salary = <span class="number">200</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 代码块局部变量price</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">long</span> price = <span class="number">500</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成员变量和局部变量的相同点：</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>声明</th>
<th>赋值</th>
<th>使用</th>
</tr>
</thead>
<tbody><tr>
<td>成员变量</td>
<td>变量类型 变量名 = 值</td>
<td>可以多次赋值</td>
<td>先声明后使用</td>
</tr>
<tr>
<td>局部变量</td>
<td>变量类型 变量名 = 值</td>
<td>可以多次赋值</td>
<td>先声明后使用</td>
</tr>
</tbody></table>
<p>成员变量和局部变量的不同点：</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>位置</th>
<th>默认值</th>
<th>权限修饰符</th>
<th>内存位置</th>
</tr>
</thead>
<tbody><tr>
<td>成员变量</td>
<td>方法体外</td>
<td>有</td>
<td>四种</td>
<td>堆</td>
</tr>
<tr>
<td>局部变量</td>
<td>方法体内</td>
<td><strong>没有</strong></td>
<td><strong>没有</strong></td>
<td><strong>栈</strong></td>
</tr>
</tbody></table>
<h2 id="3-2-默认值"><a href="#3-2-默认值" class="headerlink" title="3.2 默认值"></a>3.2 默认值</h2><table>
<thead>
<tr>
<th>类型</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>byte, short, int, long</td>
<td>0</td>
</tr>
<tr>
<td>float, double</td>
<td>0.0</td>
</tr>
<tr>
<td>char</td>
<td>\u0000</td>
</tr>
<tr>
<td>boolean</td>
<td>false</td>
</tr>
<tr>
<td>类</td>
<td>null</td>
</tr>
<tr>
<td>接口</td>
<td>null</td>
</tr>
<tr>
<td>数组</td>
<td>null</td>
</tr>
</tbody></table>
<h2 id="3-3-类型转换"><a href="#3-3-类型转换" class="headerlink" title="3.3 类型转换"></a>3.3 类型转换</h2><img src="/2019/11/03/Java-%E7%AC%AC%E4%BA%8C%E7%AF%87-Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/3.png" style="zoom:90%;">

<ol>
<li>类型转换分为自动类型转换和强制类型转换</li>
<li>自动类型转换：容量小的数据类型自动转换成容量大的数据类型</li>
<li>强制类型转换：容量大的数据类型强制转换成容量小的数据类型，可能损失精度或溢出</li>
<li>强制类型转换格式：(类型) 变量</li>
<li>多种类型混合计算时，系统首先将所有数据转化成容量大的，再进行计算</li>
<li>boolean类型不可以转化成其他类型</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testing</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 自动类型转换</span></span><br><span class="line">        <span class="keyword">byte</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">short</span> b = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">float</span> c = a + b;</span><br><span class="line">        System.out.println(c); <span class="comment">//结果30.0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 强制类型转换</span></span><br><span class="line">        <span class="keyword">double</span> d = <span class="number">3.14</span>;</span><br><span class="line">        <span class="keyword">int</span> e = (<span class="keyword">int</span>) d;</span><br><span class="line">        System.out.println(e); <span class="comment">//结果3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-4-数据交换和赋值"><a href="#3-4-数据交换和赋值" class="headerlink" title="3.4 数据交换和赋值"></a>3.4 数据交换和赋值</h2><p>常见的数据交换3种方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testing</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 基本数据类型和引用数据类型都可以</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap1</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 只能数值型，可能损失精度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap2</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        a = a + b;</span><br><span class="line">        b = a - b;</span><br><span class="line">        a = a - b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 只能数值型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap3</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        a = a^b;</span><br><span class="line">        b = a^b;</span><br><span class="line">        a = a^b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>变量有5种赋值方式：</p>
<ol>
<li>默认值</li>
<li>显示赋值</li>
<li>代码块赋值</li>
<li>构造器赋值</li>
<li>对象名.方法名, 对象名.属性名</li>
</ol>
<p>变量的赋值顺序如下，其中显示赋值和代码块赋值的顺序，谁在上谁先赋值</p>
<img src="/2019/11/03/Java-%E7%AC%AC%E4%BA%8C%E7%AF%87-Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/4.png" style="zoom:80%;">

<h1 id="4-关键字和保留字"><a href="#4-关键字和保留字" class="headerlink" title="4. 关键字和保留字"></a>4. 关键字和保留字</h1><p>关键字：具有特殊含义的标识符。</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>数据类型</td>
<td>class</td>
<td>interface</td>
<td>enum</td>
<td>byte</td>
<td>short</td>
<td>int</td>
</tr>
<tr>
<td></td>
<td>long</td>
<td>float</td>
<td>double</td>
<td>char</td>
<td>boolean</td>
<td>void</td>
</tr>
<tr>
<td>数据类型值</td>
<td>true</td>
<td>false</td>
<td>null</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>流程控制</td>
<td>if</td>
<td>else</td>
<td>switch</td>
<td>case</td>
<td>default</td>
<td>do</td>
</tr>
<tr>
<td></td>
<td>while</td>
<td>for</td>
<td>break</td>
<td>continue</td>
<td>return</td>
<td></td>
</tr>
<tr>
<td>访问修饰符</td>
<td>private</td>
<td>protected</td>
<td>public</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>类,函数,变量修饰符</td>
<td>abstract</td>
<td>final</td>
<td>static</td>
<td>synchronized</td>
<td></td>
<td></td>
</tr>
<tr>
<td>类与类关系</td>
<td>extends</td>
<td>implements</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>实例</td>
<td>new</td>
<td>this</td>
<td>super</td>
<td>instanceof</td>
<td></td>
<td></td>
</tr>
<tr>
<td>异常处理</td>
<td>try</td>
<td>catch</td>
<td>finally</td>
<td>throw</td>
<td>throws</td>
<td></td>
</tr>
<tr>
<td>包</td>
<td>package</td>
<td>import</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>其他</td>
<td>native</td>
<td>strictfp</td>
<td>assert</td>
<td>transient</td>
<td>volatile</td>
<td></td>
</tr>
</tbody></table>
<p>保留字：以后可能会作为关键字的标识符。</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>byValue</td>
<td>cast</td>
<td>future</td>
<td>generic</td>
<td>inner</td>
<td>goto</td>
</tr>
<tr>
<td></td>
<td>outer</td>
<td>rest</td>
<td>var</td>
<td>operator</td>
<td>const</td>
<td></td>
</tr>
</tbody></table>
<p>标识符命名的时候要避免关键字和保留字。</p>
<h1 id="5-运算符"><a href="#5-运算符" class="headerlink" title="5. 运算符"></a>5. 运算符</h1><h2 id="5-1-算术运算符"><a href="#5-1-算术运算符" class="headerlink" title="5.1 算术运算符"></a>5.1 算术运算符</h2><table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>加</td>
<td>a + b</td>
</tr>
<tr>
<td>-</td>
<td>减</td>
<td>a - b</td>
</tr>
<tr>
<td>*</td>
<td>乘</td>
<td>a * b</td>
</tr>
<tr>
<td>/</td>
<td>除</td>
<td>a / b</td>
</tr>
<tr>
<td>%</td>
<td>取模</td>
<td>a % b</td>
</tr>
<tr>
<td>++</td>
<td>自增</td>
<td>a++</td>
</tr>
<tr>
<td>–</td>
<td>自减</td>
<td>a–</td>
</tr>
</tbody></table>
<p>注意：</p>
<ol>
<li>对于a % b = c，c的正负只取决于a的正负。即：-3 % -2 = -1；-3 % 2 = -1；3 % -2 = 1。</li>
<li>对于b = a++，a先赋值再自增；对于b = ++a，a先自增再赋值。</li>
<li>对于b = a–，a先赋值再自减；对于b = –a，a先自减再赋值。</li>
<li>对于整型运算：两个操作数只要有一个是long，结果为long；不存在long，结果为int，即使操作数是byte，short。</li>
<li>对于浮点型运算：两个操作数必须同时是float，结果才为float；只要有一个是double，结果为double。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testing</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x1 = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> x2 = -<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> x3 = -<span class="number">2</span>;</span><br><span class="line">        System.out.println(x1 % x3);    		   <span class="comment">// 结果：1</span></span><br><span class="line">        System.out.println(x2 % x3);               <span class="comment">// 结果：-1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> x4 = x1++;</span><br><span class="line">        <span class="keyword">int</span> x5 = ++x2;</span><br><span class="line">        System.out.println(x4 + <span class="string">" "</span> + x1);         <span class="comment">//结果：3  4</span></span><br><span class="line">        System.out.println(x5 + <span class="string">" "</span> + x2);         <span class="comment">//结果：-2  -2</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span> x6 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">short</span> x7 = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">long</span> x8 = <span class="number">3</span>;</span><br><span class="line">        System.out.println(x6 + x7);                <span class="comment">//结果：3，类型是int</span></span><br><span class="line">        System.out.println(x1 + x8);                <span class="comment">//结果：7，类型是long</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> x9 = <span class="number">0.1F</span>;</span><br><span class="line">        <span class="keyword">double</span> x10 = <span class="number">0.1</span>;</span><br><span class="line">        System.out.println(x9 + x9);                <span class="comment">//结果：0.2，类型float</span></span><br><span class="line">        System.out.println(x9 + x10);               <span class="comment">//结果：0.20000000149011612，类型double</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-2-赋值运算符"><a href="#5-2-赋值运算符" class="headerlink" title="5.2 赋值运算符"></a>5.2 赋值运算符</h2><table>
<thead>
<tr>
<th>运算符</th>
<th>举例</th>
<th>等效表达式</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>a = b</td>
<td>—-</td>
</tr>
<tr>
<td>+=</td>
<td>a += b</td>
<td>a = a + b</td>
</tr>
<tr>
<td>-=</td>
<td>a -= b</td>
<td>a = a - b</td>
</tr>
<tr>
<td>*=</td>
<td>a *= b</td>
<td>a = a * b</td>
</tr>
<tr>
<td>/=</td>
<td>a /= b</td>
<td>a = a / b</td>
</tr>
<tr>
<td>%=</td>
<td>a %= b</td>
<td>a = a % b</td>
</tr>
</tbody></table>
<p>注意：</p>
<ol>
<li>“=”是赋值运算符，把右边的值赋给左边的变量，实质是把右边的地址值赋给左边。</li>
<li>赋值运算符里面的b是表达式。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testing</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a,b;</span><br><span class="line">        a = <span class="number">10</span>;</span><br><span class="line">        b = <span class="number">20</span>;</span><br><span class="line">        System.out.println(a + <span class="string">" "</span> + b);    <span class="comment">//结果：10 20</span></span><br><span class="line"></span><br><span class="line">        a += b;</span><br><span class="line">        System.out.println(a);              <span class="comment">//结果：30</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-3-比较运算符"><a href="#5-3-比较运算符" class="headerlink" title="5.3 比较运算符"></a>5.3 比较运算符</h2><table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td><strong>==</strong></td>
<td>等于</td>
<td>a == b</td>
</tr>
<tr>
<td>!=</td>
<td>不等于</td>
<td>a != b</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
<td>a &lt; b</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
<td>a &gt; b</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于或等于</td>
<td>a &lt;= b</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于或等于</td>
<td>a &gt;= b</td>
</tr>
</tbody></table>
<p>注意：</p>
<ol>
<li>比较运算符的结果是boolean：true/false。</li>
<li>“==”，”!=”：基本数据类型和引用数据类型都可以使用。</li>
<li>“&lt;”，”&gt;”，”&lt;=”，”&gt;=”：仅数值型和字符型可以使用。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testing</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">        System.out.println(a == b);     <span class="comment">// false</span></span><br><span class="line">        System.out.println(a != b);     <span class="comment">// true</span></span><br><span class="line">        System.out.println(a &lt; b);      <span class="comment">// true</span></span><br><span class="line">        System.out.println(a &gt; b);      <span class="comment">// false</span></span><br><span class="line">        System.out.println(a &lt;= b);     <span class="comment">// true</span></span><br><span class="line">        System.out.println(a &gt;= b);     <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-4-逻辑运算符"><a href="#5-4-逻辑运算符" class="headerlink" title="5.4 逻辑运算符"></a>5.4 逻辑运算符</h2><table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;</td>
<td>与（只要有一个false，结果为false）</td>
<td>a &amp; b</td>
</tr>
<tr>
<td>|</td>
<td>或（只要有一个true，结果为true）</td>
<td>a | b</td>
</tr>
<tr>
<td>!</td>
<td>非（取反）</td>
<td>!a</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>短路与（只要有一个false，直接返回false）</td>
<td>a &amp;&amp; b</td>
</tr>
<tr>
<td>||</td>
<td>短路或（只要有一个true，直接返回为true）</td>
<td>a || b</td>
</tr>
<tr>
<td>^</td>
<td>异或（相同为false，不同为true）</td>
<td>a ^ b</td>
</tr>
</tbody></table>
<p>注意：</p>
<ol>
<li>逻辑运算符的操作数和结果都是boolean：true/false。</li>
<li>数学中的 3 &lt; x &lt; 6，Java中要写成：x &gt; 3 &amp; x &lt; 6。</li>
<li>“&amp;”和”&amp;&amp;”的区别：”&amp;”左右两边都需要计算；”&amp;&amp;”如果左边true，右边参与运算，如果左边false，右边不参与计算，直接返回false。</li>
<li>“|”和”||”的区别：”|”左右两边都需要计算；”||”如果左边true，右边不参与运算，直接返回true，如果左边false，右边参与计算。</li>
<li>“^”：对于任何数a，a ^ a = 0，a ^ 0 = a。</li>
</ol>
<p>真值表：</p>
<table>
<thead>
<tr>
<th>a</th>
<th>b</th>
<th>a &amp; b</th>
<th>a &amp;&amp; b</th>
<th>a | b</th>
<th>a || b</th>
<th>! a</th>
<th>a ^ b</th>
</tr>
</thead>
<tbody><tr>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>true</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>false</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>false</td>
</tr>
</tbody></table>
<h2 id="5-5-位运算符"><a href="#5-5-位运算符" class="headerlink" title="5.5 位运算符"></a>5.5 位运算符</h2><table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;</td>
<td>与</td>
<td>a &amp; b</td>
</tr>
<tr>
<td>|</td>
<td>或</td>
<td>a | b</td>
</tr>
<tr>
<td>~</td>
<td>取反</td>
<td>~a</td>
</tr>
<tr>
<td>^</td>
<td>异或</td>
<td>a ^ b</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>左移</td>
<td>a &lt;&lt; b</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>右移</td>
<td>a &gt;&gt; b</td>
</tr>
</tbody></table>
<p>注意：</p>
<ol>
<li>位运算符是对左右两个数进行二进制位的运算。</li>
<li>在不越界的情况下：”&lt;&lt; 1”相当于”*2”，”&gt;&gt; 1”相当于”/2取商”。</li>
<li>关于数字的算法题中，经常通过位运算进行骚操作。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testing</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line">        System.out.println(a &amp; b);  <span class="comment">//结果：4      0110 &amp; 0101 = 0100</span></span><br><span class="line">        System.out.println(a | b);  <span class="comment">//结果：7      0110 | 0101 = 0111</span></span><br><span class="line">        System.out.println(~a);     <span class="comment">//结果：-7     计算机使用补码表示负数：-(a+1)</span></span><br><span class="line">        System.out.println(a ^ b);  <span class="comment">//结果：3      0110 ^ 0101 = 0011</span></span><br><span class="line">        System.out.println(a &lt;&lt; <span class="number">1</span>); <span class="comment">//结果：12     6 * 2</span></span><br><span class="line">        System.out.println(a &lt;&lt; <span class="number">2</span>); <span class="comment">//结果：24     6 * 2 * 2</span></span><br><span class="line">        System.out.println(b &gt;&gt; <span class="number">1</span>); <span class="comment">//结果：2      5 / 2</span></span><br><span class="line">        System.out.println(b &gt;&gt; <span class="number">2</span>); <span class="comment">//结果：1      5 / 2 / 2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-6-三元运算符"><a href="#5-6-三元运算符" class="headerlink" title="5.6 三元运算符"></a>5.6 三元运算符</h2><table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>x ? y : z</td>
<td>x为boolean；x为true，结果为表达式y；x为false，结果为表达式z</td>
</tr>
</tbody></table>
<p>注意：</p>
<ol>
<li>三元运算符是”if…else…”的简写形式。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testing</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="number">1</span> != <span class="number">2</span> ? <span class="string">"小学毕业"</span> : <span class="string">"小学没毕业"</span>);  <span class="comment">//结果：小学毕业</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-7-运算符优先级"><a href="#5-7-运算符优先级" class="headerlink" title="5.7 运算符优先级"></a>5.7 运算符优先级</h2><table>
<thead>
<tr>
<th>优先级</th>
<th>运算符</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>()</td>
</tr>
<tr>
<td>2</td>
<td>++，–，~，！，+(正号)，-(负号)</td>
</tr>
<tr>
<td>3</td>
<td>*，/，%</td>
</tr>
<tr>
<td>4</td>
<td>+(加法)，-(减法)</td>
</tr>
<tr>
<td>5</td>
<td>&lt;&lt;，&gt;&gt;，&gt;&gt;&gt;</td>
</tr>
<tr>
<td>6</td>
<td>&lt;，&gt;，&lt;=，&gt;=，instanceof</td>
</tr>
<tr>
<td>7</td>
<td>==，!=</td>
</tr>
<tr>
<td>8</td>
<td>&amp;</td>
</tr>
<tr>
<td>9</td>
<td>&amp;</td>
</tr>
<tr>
<td>10</td>
<td>|</td>
</tr>
<tr>
<td>11</td>
<td>&amp;&amp;</td>
</tr>
<tr>
<td>12</td>
<td>||</td>
</tr>
<tr>
<td>13</td>
<td>?   :</td>
</tr>
<tr>
<td>14</td>
<td>=，*=，/=，%=，+=，-=，&lt;&lt;=，&gt;&gt;=，&gt;&gt;&gt;=，&amp;=，^=，|=</td>
</tr>
</tbody></table>
<p>注意：</p>
<ol>
<li>运算符的优先级比较难记住，规避使用混合运算符，优先使用”()”。</li>
<li>混合运算符一般出现在面试题里，如果程序开发中大量使用，会被开除。</li>
<li>逻辑与，逻辑或，逻辑非的优先级需要掌握：! &gt; &amp; &gt; |。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testing</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">int</span> z = <span class="number">5</span>;</span><br><span class="line">        System.out.println((x-y)*z/<span class="number">5</span>);          <span class="comment">//结果：-3</span></span><br><span class="line">        System.out.println(--y | ++x &amp; ++z);    <span class="comment">//结果：3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="6-流程控制语句"><a href="#6-流程控制语句" class="headerlink" title="6. 流程控制语句"></a>6. 流程控制语句</h1><p>流程控制语句分为3类：顺序结构，选择结构和循环结构。</p>
<h2 id="6-1-顺序结构"><a href="#6-1-顺序结构" class="headerlink" title="6.1 顺序结构"></a>6.1 顺序结构</h2><p>顺序结构：程序从上到下逐行执行，中间没有任何判断和跳转。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testing</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 依次打印下面4句话</span></span><br><span class="line">        System.out.println(“<span class="string">"这是第一句话"</span>);</span><br><span class="line">        System.out.println(<span class="string">"这是第二句话"</span>);</span><br><span class="line">        System.out.println(<span class="string">"这是第三句话"</span>);</span><br><span class="line">        System.out.println(<span class="string">"这是第四句话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-2-选择结构"><a href="#6-2-选择结构" class="headerlink" title="6.2 选择结构"></a>6.2 选择结构</h2><p>选择结构：根据判断条件，选择性的执行某段代码，分为”if…else…”和”switch…case…”。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>if（布尔表达式）{<br>&#9;语句块<br>}</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-[第一篇 Java语言概述]</title>
    <url>/2019/11/01/Java-%E7%AC%AC%E4%B8%80%E7%AF%87-Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<p>Java是面向对象编程、支持跨平台的程序设计语言。Java之父：James Gosling。</p>
<p>对于程序设计语言，本质就是规则，学习的目的：掌握规则，读懂代码，规范开发。</p>
<p>Java存在两种核心机制：Java虚拟机JVM(Java Virtual Machine)和垃圾回收机制GC(Garbage Collection)</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
